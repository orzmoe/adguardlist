name: sync-adrules

on:
  workflow_dispatch:
  watch:
    types: [started]
  schedule:
    - cron: "21 */3 * * *" # 每3小时运行一次
  push:
    paths:
      - "setting/rules.txt" # 当规则源文件更新时自动运行
      - "main.go" # 当 Go 代码更新时自动运行

permissions:
  contents: write

env:
  TZ: Asia/Shanghai
  GOPROXY: https://proxy.golang.org,direct

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # 设置超时时间

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: go.sum

      - name: Setup Node.js & hostlist-compiler
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install hostlist-compiler
        run: npm install -g @adguard/hostlist-compiler@latest

      - name: Set environment variables
        run: |
          echo "RELEASE_NAME=Released on $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "TAG_NAME=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -Iseconds)" >> $GITHUB_ENV

      - name: Run Go rule generator
        run: go run main.go

      - name: Prepare release files
        run: |
          # Copy another version for alternate filename
          cp publish/output.txt publish/adguard-rules.txt
          echo "📦 发布文件准备完成"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          body: |
            🚀 **AdGuard Rules List Update**
            
            **📊 Statistics:**
            - 📥 Total Sources: ${{ env.TOTAL_COUNT }}
            - ✅ Successful Downloads: ${{ env.SUCCESS_COUNT }}
            - ❌ Failed Downloads: ${{ env.FAILED_COUNT }}
            - 📝 Total Rules: ${{ env.RULES_COUNT }}
            - 🕒 Generated: ${{ env.BUILD_TIME }}
            
            **📁 Files:**
            - `output.txt` - Main rules file
            - `adguard-rules.txt` - Alternative filename
            
            **🔗 Usage:**
            ```
            https://github.com/${{ github.repository }}/releases/latest/download/output.txt
            ```
            
            Or via CDN:
            ```
            https://cdn.jsdelivr.net/gh/${{ github.repository }}@release/output.txt
            ```
          draft: false
          prerelease: false
          files: |
            ./publish/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release branch
        run: |
          echo "🌿 更新 release 分支..."
          
          cd publish
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "121651775+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "🚀 ${{ env.RELEASE_NAME }}

          📊 Statistics:
          - Sources: ${{ env.SUCCESS_COUNT }}/${{ env.TOTAL_COUNT }}
          - Rules: ${{ env.RULES_COUNT }}
          - Generated: ${{ env.BUILD_TIME }}"
          
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release
          
          echo "✅ Release 分支更新完成"

      - name: Purge CDN cache
        run: |
          echo "🔄 清理 CDN 缓存..."
          
          urls=(
            "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/output.txt"
            "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/adguard-rules.txt"
          )
          
          for url in "${urls[@]}"; do
            echo "清理: $url"
            curl -sS "$url" || echo "清理失败: $url"
          done
          
          echo "✅ CDN 缓存清理完成"

      - name: Update repository
        run: |
          echo "📝 更新仓库文件..."
          
          # 更新日志
          echo "$(date '+%Y-%m-%d %H:%M:%S') - Rules: ${{ env.RULES_COUNT }}, Sources: ${{ env.SUCCESS_COUNT }}/${{ env.TOTAL_COUNT }}" >> ./rules/date.log
          
          # 配置 Git
          git config --global user.email "121651775+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # 提交更改
          git add ./rules/output* ./rules/date.log
          
          if git diff --staged --quiet; then
            echo "ℹ️  没有需要提交的更改"
          else
            git commit -m "📊 ${{ env.RELEASE_NAME }}

            - Rules: ${{ env.RULES_COUNT }}
            - Sources: ${{ env.SUCCESS_COUNT }}/${{ env.TOTAL_COUNT }}
            - Failed: ${{ env.FAILED_COUNT }}
            - Size: $(stat -c%s rules/output.txt) bytes"
            
            git push
            echo "✅ 仓库更新完成"
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 清理临时文件..."
          rm -f merged_rules.txt compiled_rules.txt
          echo "✅ 清理完成"
